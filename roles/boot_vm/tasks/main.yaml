---
- name: check if VM already exists
  virt:
    command: list_vms
  register: all_vms

# want fix: move to using the virt module...
- name: destroy old VM
  shell: |
    virsh destroy {{ inventory_hostname }}
    virsh undefine --remove-all-storage {{ inventory_hostname }}
  when: "inventory_hostname in all_vms.list_vms"

# want fix: move to using the virt module...
- name: install VM
  shell: >-
    virt-install
    --name {{ inventory_hostname }}
    --hvm
    --virt-type kvm
    --pxe
    --arch x86_64
    --os-type linux
    --os-variant rhel8.0
    --network network=openshift,mac="{{ '52:54:00' | community.general.random_mac(seed=inventory_hostname) }}"
    --vcpus {{ spec.cpu }}
    --ram {{ spec.ram }}
    --disk pool=default,size={{ spec.disk }},format=qcow2,cache={{ spec.disk_cache }}
    --check disk_size=off
    --nographics
    --noautoconsole
    --boot menu=on,useserial=on

- name: waiting for end of the initial installation of {{ inventory_hostname }}
  virt:
    name: "{{ inventory_hostname }}"
    command: status
  register: result
  until: result.status == "shutdown"
  retries: 100
  delay: 10

- name: restart {{ inventory_hostname }}
  virt:
    name: "{{ inventory_hostname }}"
    state: running

- name: waiting for sshd of {{ inventory_hostname }}
  wait_for:
    host: "{{ inventory_hostname }}"
    port: 22
    delay: 10
    search_regex: OpenSSH
    state: started
    timeout: 1200
